<div class='container-fluid'>
    <div class='row justify-content-center'>
        <div class='col col-5 mr-5'>
            <div class='chart-container' style='width:300px;height:300px;background-color: rgba(255, 255, 255, 0.3);'>
                <canvas id='Ratio-Chart' width='300' height='300'></canvas>
            </div>
        </div>
        <div class="col col-5 mr-5">
            <div class='chart-container' style='width:600px;height:300px;background-color: rgba(21, 223, 179, 0.3);'>
                <canvas id='Statics-Chart' width='600' height='300'></canvas>
            </div>
        </div>
    </div>
</div>

<script src='https://cdn.jsdelivr.net/npm/chart.js@3.3.2'></script>
<script src='https://cdn.jsdelivr.net/npm/luxon@1.27.0'></script>
<script src='https://cdn.jsdelivr.net/npm/chartjs-adapter-luxon@1.0.0'></script>
<script
    src='https://cdn.jsdelivr.net/npm/chartjs-plugin-streaming@2.0.0'
></script>

<script src='/socket.io/socket.io.js'></script>
<script>
var chartData = {
    temp: 0,
    humid: 0,
    lux: 0,
    soilHumi: 0,
    tempCreatedAt: Date.now(),
    humiCreatedAt: Date.now(),
    luxCreatedAt: Date.now(),
    soilCreatedAt: Date.now(),
};
document.addEventListener('DOMContentLoaded', function() {
    var socket = io(); // connect to socket server

    // Cập nhật nhiệt độ theo thời gian thực
    function addTemperature(chart, label, temp){
        //var oldData = chart.data.datasets[0].data // we get a array of old data of datasets[0]
        //var newData = oldData.push(data.temp)
        chart.data.datasets[0].data.push(temp)
        chart.data.labels.push(label)
        if(chart.data.datasets[0].data.length > 15){
            chart.data.datasets[0].data.shift()
            chart.data.labels.shift()
        }
        chart.update()
    }

    // Cập nhật độ ẩm theo thời gian thực
    function addHumidity(chart, label, humi){
        chart.data.datasets[0].data.push(humi)
        chart.data.labels.push(label)
        
        if(chart.data.datasets[0].data.length > 15){
            chart.data.datasets[0].data.shift()
            chart.data.labels.shift()
        }
        chart.update()
    }


    function addLight(chart, label, lux){
        chart.data.datasets[0].data.push(lux)
        chart.data.labels.push(label)
        if(chart.data.datasets[0].data.length > 15){
           chart.data.datasets[0].data.shift()
            chart.data.labels.shift()
        }
         console.log(chart.data.datasets[0].data)
        console.log(chart.data.labels)
        chart.update()
    }

    function getData() {
        console.log('Get data from /charts/get-data')
        const url = 'http://localhost:3000/charts/get-data';
        fetch(url)
        .then((response) => {
            return response.json();
        })
        .then((data) => {
            chartData.soilHumi = data.data.soilHumi;
            chartData.soilCreatedAt = data.data.soilCreatedAt;
            console.log(chartData)
        })
        .catch(() => {
            console.log("errot");
        })
    }

    // Face mask / no face mask Ratio chart
    const ctx = document.getElementById('Ratio-Chart').getContext('2d');
    const myChart = new Chart(ctx, {
        type: 'pie',             // 'line', 'bar', 'bubble' and 'scatter' types are supported
        data: {
            labels: ['Have Mask', 'No Mask'],
            datasets: [{
                label: 'Face Mask Ratio',
                data: [{{{ChartsData.withMask}}}, {{{ChartsData.noMask}}}],              // empty at the beginning
                backgroundColor: ['rgba(249, 217, 35, 1)','rgb(54, 162, 235)',],
                hoverOffset: 4
            }]
        },
    })
  
    // In Out charts
    const InOutCtx = document.getElementById('Statics-Chart').getContext('2d');
    const InOutChart = new Chart(InOutCtx, {
        type: 'bar',       
        data: {
            datasets: [{
                label: 'Total',
                data: [3, 5, 6],
                backgroundColor: ['rgba(33, 85, 205, 1)','rgba(39, 85, 22, 1)',],
                borderWidth: 0.3,             // empty at the beginning
            }],
        },
        options: {
            responsive: true,
        }
    });

    // Tạo socket lắng nghe sự kiện 'sendDht' đc gửi từ server kèm theo data
    socket.on('sendDht', data => {
        console.log(data)
        console.log(data.createdAt)
        var time = new Date(data.createdAt)
        time = time.toTimeString().split(' ')[0]
        console.log(time)
        addTemperature(myChart, time, data.temp)
        addHumidity(humiChart, time, data.humi)
    })


    const soilhumiCtx = document.getElementById('soilHumiChart').getContext('2d');
    const soilhumiChart = new Chart(soilhumiCtx, {
    type: 'bar',             // 'line', 'bar', 'bubble' and 'scatter' types are supported
    data: {
        datasets: [{
        label: 'Soil Humidity',
        data: [],
        backgroundColor: 'rgba(191, 56, 135, 0.2)',
        borderWidth: 0.3,             // empty at the beginning
        }],
    },
    options: {
        scales: {
            x: {
                type: 'realtime',   // x axis will auto-scroll from right to left
                realtime: {         // per-axis options
                duration: 20000,  // data in the past 20000 ms will be displayed
                refresh: 5000,    // onRefresh callback will be called every 1000 ms
                delay: 5000,      // delay of 1000 ms, so upcoming values are known before plotting a line
                pause: false,     // chart is not paused
                ttl: undefined,   // data will be automatically deleted as it disappears off the chart
                frameRate: 30,    // data points are drawn 30 times every second
                // a callback to update datasets
                onRefresh: chart => {
                    getData()
                    // query your data source and get the array of {x: timestamp, y: value} objects
                    var data = { x: Date.now(), y: chartData.soilHumi};
                    // append the new data array to the existing chart data
                    chart.data.datasets[0].data.push(data);
                    }
                }
            },
            y: {
                    min: 0,
                    max: 100,
                },
        },
        responsive: true,
    }
    });

     

    
})
</script>
